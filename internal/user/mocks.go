package user

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) CreateUser(username string, password string) (*User, error) {
	ret := _mock.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*User, error)); ok {
		return returnFunc(username, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *User); ok {
		r0 = returnFunc(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(username, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *MockUserRepository_Expecter) CreateUser(username interface{}, password interface{}) *MockUserRepository_CreateUser_Call {
	return &MockUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", username, password)}
}

func (_c *MockUserRepository_CreateUser_Call) Run(run func(username string, password string)) *MockUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) Return(user *User, err error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) RunAndReturn(run func(username string, password string) (*User, error)) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// FetchUserStats provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) FetchUserStats(userID int) (UserStats, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FetchUserStats")
	}

	var r0 UserStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (UserStats, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(int) UserStats); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Get(0).(UserStats)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_FetchUserStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUserStats'
type MockUserRepository_FetchUserStats_Call struct {
	*mock.Call
}

// FetchUserStats is a helper method to define mock.On call
//   - userID int
func (_e *MockUserRepository_Expecter) FetchUserStats(userID interface{}) *MockUserRepository_FetchUserStats_Call {
	return &MockUserRepository_FetchUserStats_Call{Call: _e.mock.On("FetchUserStats", userID)}
}

func (_c *MockUserRepository_FetchUserStats_Call) Run(run func(userID int)) *MockUserRepository_FetchUserStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_FetchUserStats_Call) Return(userStats UserStats, err error) *MockUserRepository_FetchUserStats_Call {
	_c.Call.Return(userStats, err)
	return _c
}

func (_c *MockUserRepository_FetchUserStats_Call) RunAndReturn(run func(userID int) (UserStats, error)) *MockUserRepository_FetchUserStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUser(id int) (*User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (*User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) *User); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserRepository_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - id int
func (_e *MockUserRepository_Expecter) GetUser(id interface{}) *MockUserRepository_GetUser_Call {
	return &MockUserRepository_GetUser_Call{Call: _e.mock.On("GetUser", id)}
}

func (_c *MockUserRepository_GetUser_Call) Run(run func(id int)) *MockUserRepository_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_GetUser_Call) Return(user *User, err error) *MockUserRepository_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_GetUser_Call) RunAndReturn(run func(id int) (*User, error)) *MockUserRepository_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserUsername provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) GetUserUsername(id int) (string, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserUsername")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (string, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) string); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_GetUserUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserUsername'
type MockUserRepository_GetUserUsername_Call struct {
	*mock.Call
}

// GetUserUsername is a helper method to define mock.On call
//   - id int
func (_e *MockUserRepository_Expecter) GetUserUsername(id interface{}) *MockUserRepository_GetUserUsername_Call {
	return &MockUserRepository_GetUserUsername_Call{Call: _e.mock.On("GetUserUsername", id)}
}

func (_c *MockUserRepository_GetUserUsername_Call) Run(run func(id int)) *MockUserRepository_GetUserUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_GetUserUsername_Call) Return(s string, err error) *MockUserRepository_GetUserUsername_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUserRepository_GetUserUsername_Call) RunAndReturn(run func(id int) (string, error)) *MockUserRepository_GetUserUsername_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserStats provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) UpdateUserStats(stats *UserStats) error {
	ret := _mock.Called(stats)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserStats")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*UserStats) error); ok {
		r0 = returnFunc(stats)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_UpdateUserStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserStats'
type MockUserRepository_UpdateUserStats_Call struct {
	*mock.Call
}

// UpdateUserStats is a helper method to define mock.On call
//   - stats *UserStats
func (_e *MockUserRepository_Expecter) UpdateUserStats(stats interface{}) *MockUserRepository_UpdateUserStats_Call {
	return &MockUserRepository_UpdateUserStats_Call{Call: _e.mock.On("UpdateUserStats", stats)}
}

func (_c *MockUserRepository_UpdateUserStats_Call) Run(run func(stats *UserStats)) *MockUserRepository_UpdateUserStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *UserStats
		if args[0] != nil {
			arg0 = args[0].(*UserStats)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserRepository_UpdateUserStats_Call) Return(err error) *MockUserRepository_UpdateUserStats_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_UpdateUserStats_Call) RunAndReturn(run func(stats *UserStats) error) *MockUserRepository_UpdateUserStats_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) ValidateUser(username string, password string) (*User, error) {
	ret := _mock.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUser")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*User, error)); ok {
		return returnFunc(username, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *User); ok {
		r0 = returnFunc(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(username, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_ValidateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUser'
type MockUserRepository_ValidateUser_Call struct {
	*mock.Call
}

// ValidateUser is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *MockUserRepository_Expecter) ValidateUser(username interface{}, password interface{}) *MockUserRepository_ValidateUser_Call {
	return &MockUserRepository_ValidateUser_Call{Call: _e.mock.On("ValidateUser", username, password)}
}

func (_c *MockUserRepository_ValidateUser_Call) Run(run func(username string, password string)) *MockUserRepository_ValidateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_ValidateUser_Call) Return(user *User, err error) *MockUserRepository_ValidateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_ValidateUser_Call) RunAndReturn(run func(username string, password string) (*User, error)) *MockUserRepository_ValidateUser_Call {
	_c.Call.Return(run)
	return _c
}
