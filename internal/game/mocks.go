// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package game

import (
	"time"

	mock "github.com/stretchr/testify/mock"
	"github.com/thesrcielos/TopTankBattle/internal/game/state"
)

// NewMockLeaderElector creates a new instance of MockLeaderElector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLeaderElector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLeaderElector {
	mock := &MockLeaderElector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLeaderElector is an autogenerated mock type for the LeaderElector type
type MockLeaderElector struct {
	mock.Mock
}

type MockLeaderElector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLeaderElector) EXPECT() *MockLeaderElector_Expecter {
	return &MockLeaderElector_Expecter{mock: &_m.Mock}
}

// AttemptLeadership provides a mock function for the type MockLeaderElector
func (_mock *MockLeaderElector) AttemptLeadership(roomId string) {
	_mock.Called(roomId)
	return
}

// MockLeaderElector_AttemptLeadership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttemptLeadership'
type MockLeaderElector_AttemptLeadership_Call struct {
	*mock.Call
}

// AttemptLeadership is a helper method to define mock.On call
//   - roomId string
func (_e *MockLeaderElector_Expecter) AttemptLeadership(roomId interface{}) *MockLeaderElector_AttemptLeadership_Call {
	return &MockLeaderElector_AttemptLeadership_Call{Call: _e.mock.On("AttemptLeadership", roomId)}
}

func (_c *MockLeaderElector_AttemptLeadership_Call) Run(run func(roomId string)) *MockLeaderElector_AttemptLeadership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLeaderElector_AttemptLeadership_Call) Return() *MockLeaderElector_AttemptLeadership_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLeaderElector_AttemptLeadership_Call) RunAndReturn(run func(roomId string)) *MockLeaderElector_AttemptLeadership_Call {
	_c.Run(run)
	return _c
}

// NewMockGameService creates a new instance of MockGameService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGameService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGameService {
	mock := &MockGameService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGameService is an autogenerated mock type for the GameService type
type MockGameService struct {
	mock.Mock
}

type MockGameService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGameService) EXPECT() *MockGameService_Expecter {
	return &MockGameService_Expecter{mock: &_m.Mock}
}

// CheckBulletCollision provides a mock function for the type MockGameService
func (_mock *MockGameService) CheckBulletCollision(bullet *state.Bullet, players map[string]*state.PlayerState, fortresses []*state.Fortress) (*state.PlayerState, *state.Fortress, bool) {
	ret := _mock.Called(bullet, players, fortresses)

	if len(ret) == 0 {
		panic("no return value specified for CheckBulletCollision")
	}

	var r0 *state.PlayerState
	var r1 *state.Fortress
	var r2 bool
	if returnFunc, ok := ret.Get(0).(func(*state.Bullet, map[string]*state.PlayerState, []*state.Fortress) (*state.PlayerState, *state.Fortress, bool)); ok {
		return returnFunc(bullet, players, fortresses)
	}
	if returnFunc, ok := ret.Get(0).(func(*state.Bullet, map[string]*state.PlayerState, []*state.Fortress) *state.PlayerState); ok {
		r0 = returnFunc(bullet, players, fortresses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.PlayerState)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*state.Bullet, map[string]*state.PlayerState, []*state.Fortress) *state.Fortress); ok {
		r1 = returnFunc(bullet, players, fortresses)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*state.Fortress)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(*state.Bullet, map[string]*state.PlayerState, []*state.Fortress) bool); ok {
		r2 = returnFunc(bullet, players, fortresses)
	} else {
		r2 = ret.Get(2).(bool)
	}
	return r0, r1, r2
}

// MockGameService_CheckBulletCollision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckBulletCollision'
type MockGameService_CheckBulletCollision_Call struct {
	*mock.Call
}

// CheckBulletCollision is a helper method to define mock.On call
//   - bullet *state.Bullet
//   - players map[string]*state.PlayerState
//   - fortresses []*state.Fortress
func (_e *MockGameService_Expecter) CheckBulletCollision(bullet interface{}, players interface{}, fortresses interface{}) *MockGameService_CheckBulletCollision_Call {
	return &MockGameService_CheckBulletCollision_Call{Call: _e.mock.On("CheckBulletCollision", bullet, players, fortresses)}
}

func (_c *MockGameService_CheckBulletCollision_Call) Run(run func(bullet *state.Bullet, players map[string]*state.PlayerState, fortresses []*state.Fortress)) *MockGameService_CheckBulletCollision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *state.Bullet
		if args[0] != nil {
			arg0 = args[0].(*state.Bullet)
		}
		var arg1 map[string]*state.PlayerState
		if args[1] != nil {
			arg1 = args[1].(map[string]*state.PlayerState)
		}
		var arg2 []*state.Fortress
		if args[2] != nil {
			arg2 = args[2].([]*state.Fortress)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGameService_CheckBulletCollision_Call) Return(playerState *state.PlayerState, fortress *state.Fortress, b bool) *MockGameService_CheckBulletCollision_Call {
	_c.Call.Return(playerState, fortress, b)
	return _c
}

func (_c *MockGameService_CheckBulletCollision_Call) RunAndReturn(run func(bullet *state.Bullet, players map[string]*state.PlayerState, fortresses []*state.Fortress) (*state.PlayerState, *state.Fortress, bool)) *MockGameService_CheckBulletCollision_Call {
	_c.Call.Return(run)
	return _c
}

// FinishGame provides a mock function for the type MockGameService
func (_mock *MockGameService) FinishGame(game *state.GameState) {
	_mock.Called(game)
	return
}

// MockGameService_FinishGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishGame'
type MockGameService_FinishGame_Call struct {
	*mock.Call
}

// FinishGame is a helper method to define mock.On call
//   - game *state.GameState
func (_e *MockGameService_Expecter) FinishGame(game interface{}) *MockGameService_FinishGame_Call {
	return &MockGameService_FinishGame_Call{Call: _e.mock.On("FinishGame", game)}
}

func (_c *MockGameService_FinishGame_Call) Run(run func(game *state.GameState)) *MockGameService_FinishGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *state.GameState
		if args[0] != nil {
			arg0 = args[0].(*state.GameState)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGameService_FinishGame_Call) Return() *MockGameService_FinishGame_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameService_FinishGame_Call) RunAndReturn(run func(game *state.GameState)) *MockGameService_FinishGame_Call {
	_c.Run(run)
	return _c
}

// HandleHitFortress provides a mock function for the type MockGameService
func (_mock *MockGameService) HandleHitFortress(hitFortress *state.Fortress, state1 *state.GameState, bulletDamage int, bulletId string, users []string) bool {
	ret := _mock.Called(hitFortress, state1, bulletDamage, bulletId, users)

	if len(ret) == 0 {
		panic("no return value specified for HandleHitFortress")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(*state.Fortress, *state.GameState, int, string, []string) bool); ok {
		r0 = returnFunc(hitFortress, state1, bulletDamage, bulletId, users)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockGameService_HandleHitFortress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleHitFortress'
type MockGameService_HandleHitFortress_Call struct {
	*mock.Call
}

// HandleHitFortress is a helper method to define mock.On call
//   - hitFortress *state.Fortress
//   - state1 *state.GameState
//   - bulletDamage int
//   - bulletId string
//   - users []string
func (_e *MockGameService_Expecter) HandleHitFortress(hitFortress interface{}, state1 interface{}, bulletDamage interface{}, bulletId interface{}, users interface{}) *MockGameService_HandleHitFortress_Call {
	return &MockGameService_HandleHitFortress_Call{Call: _e.mock.On("HandleHitFortress", hitFortress, state1, bulletDamage, bulletId, users)}
}

func (_c *MockGameService_HandleHitFortress_Call) Run(run func(hitFortress *state.Fortress, state1 *state.GameState, bulletDamage int, bulletId string, users []string)) *MockGameService_HandleHitFortress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *state.Fortress
		if args[0] != nil {
			arg0 = args[0].(*state.Fortress)
		}
		var arg1 *state.GameState
		if args[1] != nil {
			arg1 = args[1].(*state.GameState)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 []string
		if args[4] != nil {
			arg4 = args[4].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockGameService_HandleHitFortress_Call) Return(b bool) *MockGameService_HandleHitFortress_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockGameService_HandleHitFortress_Call) RunAndReturn(run func(hitFortress *state.Fortress, state1 *state.GameState, bulletDamage int, bulletId string, users []string) bool) *MockGameService_HandleHitFortress_Call {
	_c.Call.Return(run)
	return _c
}

// HandleHitPlayer provides a mock function for the type MockGameService
func (_mock *MockGameService) HandleHitPlayer(hitPlayer *state.PlayerState, state1 *state.GameState, bulletDamage int, bulletId string, users []string) {
	_mock.Called(hitPlayer, state1, bulletDamage, bulletId, users)
	return
}

// MockGameService_HandleHitPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleHitPlayer'
type MockGameService_HandleHitPlayer_Call struct {
	*mock.Call
}

// HandleHitPlayer is a helper method to define mock.On call
//   - hitPlayer *state.PlayerState
//   - state1 *state.GameState
//   - bulletDamage int
//   - bulletId string
//   - users []string
func (_e *MockGameService_Expecter) HandleHitPlayer(hitPlayer interface{}, state1 interface{}, bulletDamage interface{}, bulletId interface{}, users interface{}) *MockGameService_HandleHitPlayer_Call {
	return &MockGameService_HandleHitPlayer_Call{Call: _e.mock.On("HandleHitPlayer", hitPlayer, state1, bulletDamage, bulletId, users)}
}

func (_c *MockGameService_HandleHitPlayer_Call) Run(run func(hitPlayer *state.PlayerState, state1 *state.GameState, bulletDamage int, bulletId string, users []string)) *MockGameService_HandleHitPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *state.PlayerState
		if args[0] != nil {
			arg0 = args[0].(*state.PlayerState)
		}
		var arg1 *state.GameState
		if args[1] != nil {
			arg1 = args[1].(*state.GameState)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 []string
		if args[4] != nil {
			arg4 = args[4].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockGameService_HandleHitPlayer_Call) Return() *MockGameService_HandleHitPlayer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameService_HandleHitPlayer_Call) RunAndReturn(run func(hitPlayer *state.PlayerState, state1 *state.GameState, bulletDamage int, bulletId string, users []string)) *MockGameService_HandleHitPlayer_Call {
	_c.Run(run)
	return _c
}

// MovePlayer provides a mock function for the type MockGameService
func (_mock *MockGameService) MovePlayer(playerId string, newPosition state.Position) {
	_mock.Called(playerId, newPosition)
	return
}

// MockGameService_MovePlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MovePlayer'
type MockGameService_MovePlayer_Call struct {
	*mock.Call
}

// MovePlayer is a helper method to define mock.On call
//   - playerId string
//   - newPosition state.Position
func (_e *MockGameService_Expecter) MovePlayer(playerId interface{}, newPosition interface{}) *MockGameService_MovePlayer_Call {
	return &MockGameService_MovePlayer_Call{Call: _e.mock.On("MovePlayer", playerId, newPosition)}
}

func (_c *MockGameService_MovePlayer_Call) Run(run func(playerId string, newPosition state.Position)) *MockGameService_MovePlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 state.Position
		if args[1] != nil {
			arg1 = args[1].(state.Position)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGameService_MovePlayer_Call) Return() *MockGameService_MovePlayer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameService_MovePlayer_Call) RunAndReturn(run func(playerId string, newPosition state.Position)) *MockGameService_MovePlayer_Call {
	_c.Run(run)
	return _c
}

// NotifyGameStart provides a mock function for the type MockGameService
func (_mock *MockGameService) NotifyGameStart(game *state.GameState) {
	_mock.Called(game)
	return
}

// MockGameService_NotifyGameStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyGameStart'
type MockGameService_NotifyGameStart_Call struct {
	*mock.Call
}

// NotifyGameStart is a helper method to define mock.On call
//   - game *state.GameState
func (_e *MockGameService_Expecter) NotifyGameStart(game interface{}) *MockGameService_NotifyGameStart_Call {
	return &MockGameService_NotifyGameStart_Call{Call: _e.mock.On("NotifyGameStart", game)}
}

func (_c *MockGameService_NotifyGameStart_Call) Run(run func(game *state.GameState)) *MockGameService_NotifyGameStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *state.GameState
		if args[0] != nil {
			arg0 = args[0].(*state.GameState)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGameService_NotifyGameStart_Call) Return() *MockGameService_NotifyGameStart_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameService_NotifyGameStart_Call) RunAndReturn(run func(game *state.GameState)) *MockGameService_NotifyGameStart_Call {
	_c.Run(run)
	return _c
}

// RevivePlayer provides a mock function for the type MockGameService
func (_mock *MockGameService) RevivePlayer(playerId string, gameState *state.GameState) {
	_mock.Called(playerId, gameState)
	return
}

// MockGameService_RevivePlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevivePlayer'
type MockGameService_RevivePlayer_Call struct {
	*mock.Call
}

// RevivePlayer is a helper method to define mock.On call
//   - playerId string
//   - gameState *state.GameState
func (_e *MockGameService_Expecter) RevivePlayer(playerId interface{}, gameState interface{}) *MockGameService_RevivePlayer_Call {
	return &MockGameService_RevivePlayer_Call{Call: _e.mock.On("RevivePlayer", playerId, gameState)}
}

func (_c *MockGameService_RevivePlayer_Call) Run(run func(playerId string, gameState *state.GameState)) *MockGameService_RevivePlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *state.GameState
		if args[1] != nil {
			arg1 = args[1].(*state.GameState)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGameService_RevivePlayer_Call) Return() *MockGameService_RevivePlayer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameService_RevivePlayer_Call) RunAndReturn(run func(playerId string, gameState *state.GameState)) *MockGameService_RevivePlayer_Call {
	_c.Run(run)
	return _c
}

// RunGameLoop provides a mock function for the type MockGameService
func (_mock *MockGameService) RunGameLoop(state1 *state.GameState, test bool) {
	_mock.Called(state1, test)
	return
}

// MockGameService_RunGameLoop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunGameLoop'
type MockGameService_RunGameLoop_Call struct {
	*mock.Call
}

// RunGameLoop is a helper method to define mock.On call
//   - state1 *state.GameState
//   - test bool
func (_e *MockGameService_Expecter) RunGameLoop(state1 interface{}, test interface{}) *MockGameService_RunGameLoop_Call {
	return &MockGameService_RunGameLoop_Call{Call: _e.mock.On("RunGameLoop", state1, test)}
}

func (_c *MockGameService_RunGameLoop_Call) Run(run func(state1 *state.GameState, test bool)) *MockGameService_RunGameLoop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *state.GameState
		if args[0] != nil {
			arg0 = args[0].(*state.GameState)
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGameService_RunGameLoop_Call) Return() *MockGameService_RunGameLoop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameService_RunGameLoop_Call) RunAndReturn(run func(state1 *state.GameState, test bool)) *MockGameService_RunGameLoop_Call {
	_c.Run(run)
	return _c
}

// SendGameChangeMessage provides a mock function for the type MockGameService
func (_mock *MockGameService) SendGameChangeMessage(roomId string, msg GameMessage) {
	_mock.Called(roomId, msg)
	return
}

// MockGameService_SendGameChangeMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendGameChangeMessage'
type MockGameService_SendGameChangeMessage_Call struct {
	*mock.Call
}

// SendGameChangeMessage is a helper method to define mock.On call
//   - roomId string
//   - msg GameMessage
func (_e *MockGameService_Expecter) SendGameChangeMessage(roomId interface{}, msg interface{}) *MockGameService_SendGameChangeMessage_Call {
	return &MockGameService_SendGameChangeMessage_Call{Call: _e.mock.On("SendGameChangeMessage", roomId, msg)}
}

func (_c *MockGameService_SendGameChangeMessage_Call) Run(run func(roomId string, msg GameMessage)) *MockGameService_SendGameChangeMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 GameMessage
		if args[1] != nil {
			arg1 = args[1].(GameMessage)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGameService_SendGameChangeMessage_Call) Return() *MockGameService_SendGameChangeMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameService_SendGameChangeMessage_Call) RunAndReturn(run func(roomId string, msg GameMessage)) *MockGameService_SendGameChangeMessage_Call {
	_c.Run(run)
	return _c
}

// SetPlayersGameState provides a mock function for the type MockGameService
func (_mock *MockGameService) SetPlayersGameState(gameState *state.GameState) error {
	ret := _mock.Called(gameState)

	if len(ret) == 0 {
		panic("no return value specified for SetPlayersGameState")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*state.GameState) error); ok {
		r0 = returnFunc(gameState)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGameService_SetPlayersGameState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPlayersGameState'
type MockGameService_SetPlayersGameState_Call struct {
	*mock.Call
}

// SetPlayersGameState is a helper method to define mock.On call
//   - gameState *state.GameState
func (_e *MockGameService_Expecter) SetPlayersGameState(gameState interface{}) *MockGameService_SetPlayersGameState_Call {
	return &MockGameService_SetPlayersGameState_Call{Call: _e.mock.On("SetPlayersGameState", gameState)}
}

func (_c *MockGameService_SetPlayersGameState_Call) Run(run func(gameState *state.GameState)) *MockGameService_SetPlayersGameState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *state.GameState
		if args[0] != nil {
			arg0 = args[0].(*state.GameState)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGameService_SetPlayersGameState_Call) Return(err error) *MockGameService_SetPlayersGameState_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGameService_SetPlayersGameState_Call) RunAndReturn(run func(gameState *state.GameState) error) *MockGameService_SetPlayersGameState_Call {
	_c.Call.Return(run)
	return _c
}

// ShootBullet provides a mock function for the type MockGameService
func (_mock *MockGameService) ShootBullet(bullet *state.Bullet) {
	_mock.Called(bullet)
	return
}

// MockGameService_ShootBullet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShootBullet'
type MockGameService_ShootBullet_Call struct {
	*mock.Call
}

// ShootBullet is a helper method to define mock.On call
//   - bullet *state.Bullet
func (_e *MockGameService_Expecter) ShootBullet(bullet interface{}) *MockGameService_ShootBullet_Call {
	return &MockGameService_ShootBullet_Call{Call: _e.mock.On("ShootBullet", bullet)}
}

func (_c *MockGameService_ShootBullet_Call) Run(run func(bullet *state.Bullet)) *MockGameService_ShootBullet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *state.Bullet
		if args[0] != nil {
			arg0 = args[0].(*state.Bullet)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGameService_ShootBullet_Call) Return() *MockGameService_ShootBullet_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameService_ShootBullet_Call) RunAndReturn(run func(bullet *state.Bullet)) *MockGameService_ShootBullet_Call {
	_c.Run(run)
	return _c
}

// StartGame provides a mock function for the type MockGameService
func (_mock *MockGameService) StartGame(playerId string, roomId string, test bool) error {
	ret := _mock.Called(playerId, roomId, test)

	if len(ret) == 0 {
		panic("no return value specified for StartGame")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = returnFunc(playerId, roomId, test)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGameService_StartGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartGame'
type MockGameService_StartGame_Call struct {
	*mock.Call
}

// StartGame is a helper method to define mock.On call
//   - playerId string
//   - roomId string
//   - test bool
func (_e *MockGameService_Expecter) StartGame(playerId interface{}, roomId interface{}, test interface{}) *MockGameService_StartGame_Call {
	return &MockGameService_StartGame_Call{Call: _e.mock.On("StartGame", playerId, roomId, test)}
}

func (_c *MockGameService_StartGame_Call) Run(run func(playerId string, roomId string, test bool)) *MockGameService_StartGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGameService_StartGame_Call) Return(err error) *MockGameService_StartGame_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGameService_StartGame_Call) RunAndReturn(run func(playerId string, roomId string, test bool) error) *MockGameService_StartGame_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBullets provides a mock function for the type MockGameService
func (_mock *MockGameService) UpdateBullets(bullets map[string]*state.Bullet, delta float64) {
	_mock.Called(bullets, delta)
	return
}

// MockGameService_UpdateBullets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBullets'
type MockGameService_UpdateBullets_Call struct {
	*mock.Call
}

// UpdateBullets is a helper method to define mock.On call
//   - bullets map[string]*state.Bullet
//   - delta float64
func (_e *MockGameService_Expecter) UpdateBullets(bullets interface{}, delta interface{}) *MockGameService_UpdateBullets_Call {
	return &MockGameService_UpdateBullets_Call{Call: _e.mock.On("UpdateBullets", bullets, delta)}
}

func (_c *MockGameService_UpdateBullets_Call) Run(run func(bullets map[string]*state.Bullet, delta float64)) *MockGameService_UpdateBullets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]*state.Bullet
		if args[0] != nil {
			arg0 = args[0].(map[string]*state.Bullet)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGameService_UpdateBullets_Call) Return() *MockGameService_UpdateBullets_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameService_UpdateBullets_Call) RunAndReturn(run func(bullets map[string]*state.Bullet, delta float64)) *MockGameService_UpdateBullets_Call {
	_c.Run(run)
	return _c
}

// ValidateRoom provides a mock function for the type MockGameService
func (_mock *MockGameService) ValidateRoom(room *Room, playerId string) error {
	ret := _mock.Called(room, playerId)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRoom")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Room, string) error); ok {
		r0 = returnFunc(room, playerId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGameService_ValidateRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRoom'
type MockGameService_ValidateRoom_Call struct {
	*mock.Call
}

// ValidateRoom is a helper method to define mock.On call
//   - room *Room
//   - playerId string
func (_e *MockGameService_Expecter) ValidateRoom(room interface{}, playerId interface{}) *MockGameService_ValidateRoom_Call {
	return &MockGameService_ValidateRoom_Call{Call: _e.mock.On("ValidateRoom", room, playerId)}
}

func (_c *MockGameService_ValidateRoom_Call) Run(run func(room *Room, playerId string)) *MockGameService_ValidateRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Room
		if args[0] != nil {
			arg0 = args[0].(*Room)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGameService_ValidateRoom_Call) Return(err error) *MockGameService_ValidateRoom_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGameService_ValidateRoom_Call) RunAndReturn(run func(room *Room, playerId string) error) *MockGameService_ValidateRoom_Call {
	_c.Call.Return(run)
	return _c
}

// checkFortressCollision provides a mock function for the type MockGameService
func (_mock *MockGameService) checkFortressCollision(checkPoints []struct {
	x float64
	y float64
}, fortress *state.Fortress, team1 bool) (*state.Fortress, bool) {
	ret := _mock.Called(checkPoints, fortress, team1)

	if len(ret) == 0 {
		panic("no return value specified for checkFortressCollision")
	}

	var r0 *state.Fortress
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func([]struct {
		x float64
		y float64
	}, *state.Fortress, bool) (*state.Fortress, bool)); ok {
		return returnFunc(checkPoints, fortress, team1)
	}
	if returnFunc, ok := ret.Get(0).(func([]struct {
		x float64
		y float64
	}, *state.Fortress, bool) *state.Fortress); ok {
		r0 = returnFunc(checkPoints, fortress, team1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Fortress)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]struct {
		x float64
		y float64
	}, *state.Fortress, bool) bool); ok {
		r1 = returnFunc(checkPoints, fortress, team1)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockGameService_checkFortressCollision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'checkFortressCollision'
type MockGameService_checkFortressCollision_Call struct {
	*mock.Call
}

// checkFortressCollision is a helper method to define mock.On call
//   - checkPoints []struct{x float64; y float64}
//   - fortress *state.Fortress
//   - team1 bool
func (_e *MockGameService_Expecter) checkFortressCollision(checkPoints interface{}, fortress interface{}, team1 interface{}) *MockGameService_checkFortressCollision_Call {
	return &MockGameService_checkFortressCollision_Call{Call: _e.mock.On("checkFortressCollision", checkPoints, fortress, team1)}
}

func (_c *MockGameService_checkFortressCollision_Call) Run(run func(checkPoints []struct {
	x float64
	y float64
}, fortress *state.Fortress, team1 bool)) *MockGameService_checkFortressCollision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []struct {
			x float64
			y float64
		}
		if args[0] != nil {
			arg0 = args[0].([]struct {
				x float64
				y float64
			})
		}
		var arg1 *state.Fortress
		if args[1] != nil {
			arg1 = args[1].(*state.Fortress)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGameService_checkFortressCollision_Call) Return(fortress1 *state.Fortress, b bool) *MockGameService_checkFortressCollision_Call {
	_c.Call.Return(fortress1, b)
	return _c
}

func (_c *MockGameService_checkFortressCollision_Call) RunAndReturn(run func(checkPoints []struct {
	x float64
	y float64
}, fortress *state.Fortress, team1 bool) (*state.Fortress, bool)) *MockGameService_checkFortressCollision_Call {
	_c.Call.Return(run)
	return _c
}

// checkObstacleCollision provides a mock function for the type MockGameService
func (_mock *MockGameService) checkObstacleCollision(point struct {
	x float64
	y float64
}, obstacles [][]bool) bool {
	ret := _mock.Called(point, obstacles)

	if len(ret) == 0 {
		panic("no return value specified for checkObstacleCollision")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(struct {
		x float64
		y float64
	}, [][]bool) bool); ok {
		r0 = returnFunc(point, obstacles)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockGameService_checkObstacleCollision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'checkObstacleCollision'
type MockGameService_checkObstacleCollision_Call struct {
	*mock.Call
}

// checkObstacleCollision is a helper method to define mock.On call
//   - point struct{x float64; y float64}
//   - obstacles [][]bool
func (_e *MockGameService_Expecter) checkObstacleCollision(point interface{}, obstacles interface{}) *MockGameService_checkObstacleCollision_Call {
	return &MockGameService_checkObstacleCollision_Call{Call: _e.mock.On("checkObstacleCollision", point, obstacles)}
}

func (_c *MockGameService_checkObstacleCollision_Call) Run(run func(point struct {
	x float64
	y float64
}, obstacles [][]bool)) *MockGameService_checkObstacleCollision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 struct {
			x float64
			y float64
		}
		if args[0] != nil {
			arg0 = args[0].(struct {
				x float64
				y float64
			})
		}
		var arg1 [][]bool
		if args[1] != nil {
			arg1 = args[1].([][]bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGameService_checkObstacleCollision_Call) Return(b bool) *MockGameService_checkObstacleCollision_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockGameService_checkObstacleCollision_Call) RunAndReturn(run func(point struct {
	x float64
	y float64
}, obstacles [][]bool) bool) *MockGameService_checkObstacleCollision_Call {
	_c.Call.Return(run)
	return _c
}

// checkPlayerCollision provides a mock function for the type MockGameService
func (_mock *MockGameService) checkPlayerCollision(checkPoints []struct {
	x float64
	y float64
}, player *state.PlayerState, team1 bool) (*state.PlayerState, bool) {
	ret := _mock.Called(checkPoints, player, team1)

	if len(ret) == 0 {
		panic("no return value specified for checkPlayerCollision")
	}

	var r0 *state.PlayerState
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func([]struct {
		x float64
		y float64
	}, *state.PlayerState, bool) (*state.PlayerState, bool)); ok {
		return returnFunc(checkPoints, player, team1)
	}
	if returnFunc, ok := ret.Get(0).(func([]struct {
		x float64
		y float64
	}, *state.PlayerState, bool) *state.PlayerState); ok {
		r0 = returnFunc(checkPoints, player, team1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.PlayerState)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]struct {
		x float64
		y float64
	}, *state.PlayerState, bool) bool); ok {
		r1 = returnFunc(checkPoints, player, team1)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockGameService_checkPlayerCollision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'checkPlayerCollision'
type MockGameService_checkPlayerCollision_Call struct {
	*mock.Call
}

// checkPlayerCollision is a helper method to define mock.On call
//   - checkPoints []struct{x float64; y float64}
//   - player *state.PlayerState
//   - team1 bool
func (_e *MockGameService_Expecter) checkPlayerCollision(checkPoints interface{}, player interface{}, team1 interface{}) *MockGameService_checkPlayerCollision_Call {
	return &MockGameService_checkPlayerCollision_Call{Call: _e.mock.On("checkPlayerCollision", checkPoints, player, team1)}
}

func (_c *MockGameService_checkPlayerCollision_Call) Run(run func(checkPoints []struct {
	x float64
	y float64
}, player *state.PlayerState, team1 bool)) *MockGameService_checkPlayerCollision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []struct {
			x float64
			y float64
		}
		if args[0] != nil {
			arg0 = args[0].([]struct {
				x float64
				y float64
			})
		}
		var arg1 *state.PlayerState
		if args[1] != nil {
			arg1 = args[1].(*state.PlayerState)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGameService_checkPlayerCollision_Call) Return(playerState *state.PlayerState, b bool) *MockGameService_checkPlayerCollision_Call {
	_c.Call.Return(playerState, b)
	return _c
}

func (_c *MockGameService_checkPlayerCollision_Call) RunAndReturn(run func(checkPoints []struct {
	x float64
	y float64
}, player *state.PlayerState, team1 bool) (*state.PlayerState, bool)) *MockGameService_checkPlayerCollision_Call {
	_c.Call.Return(run)
	return _c
}

// getGamePlayerIds provides a mock function for the type MockGameService
func (_mock *MockGameService) getGamePlayerIds(game *state.GameState, playerId string) []string {
	ret := _mock.Called(game, playerId)

	if len(ret) == 0 {
		panic("no return value specified for getGamePlayerIds")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(*state.GameState, string) []string); ok {
		r0 = returnFunc(game, playerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockGameService_getGamePlayerIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getGamePlayerIds'
type MockGameService_getGamePlayerIds_Call struct {
	*mock.Call
}

// getGamePlayerIds is a helper method to define mock.On call
//   - game *state.GameState
//   - playerId string
func (_e *MockGameService_Expecter) getGamePlayerIds(game interface{}, playerId interface{}) *MockGameService_getGamePlayerIds_Call {
	return &MockGameService_getGamePlayerIds_Call{Call: _e.mock.On("getGamePlayerIds", game, playerId)}
}

func (_c *MockGameService_getGamePlayerIds_Call) Run(run func(game *state.GameState, playerId string)) *MockGameService_getGamePlayerIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *state.GameState
		if args[0] != nil {
			arg0 = args[0].(*state.GameState)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGameService_getGamePlayerIds_Call) Return(strings []string) *MockGameService_getGamePlayerIds_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockGameService_getGamePlayerIds_Call) RunAndReturn(run func(game *state.GameState, playerId string) []string) *MockGameService_getGamePlayerIds_Call {
	_c.Call.Return(run)
	return _c
}

// getPlayerIdsFromRoom provides a mock function for the type MockGameService
func (_mock *MockGameService) getPlayerIdsFromRoom(roomId string, playerId string) []string {
	ret := _mock.Called(roomId, playerId)

	if len(ret) == 0 {
		panic("no return value specified for getPlayerIdsFromRoom")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = returnFunc(roomId, playerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockGameService_getPlayerIdsFromRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getPlayerIdsFromRoom'
type MockGameService_getPlayerIdsFromRoom_Call struct {
	*mock.Call
}

// getPlayerIdsFromRoom is a helper method to define mock.On call
//   - roomId string
//   - playerId string
func (_e *MockGameService_Expecter) getPlayerIdsFromRoom(roomId interface{}, playerId interface{}) *MockGameService_getPlayerIdsFromRoom_Call {
	return &MockGameService_getPlayerIdsFromRoom_Call{Call: _e.mock.On("getPlayerIdsFromRoom", roomId, playerId)}
}

func (_c *MockGameService_getPlayerIdsFromRoom_Call) Run(run func(roomId string, playerId string)) *MockGameService_getPlayerIdsFromRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGameService_getPlayerIdsFromRoom_Call) Return(strings []string) *MockGameService_getPlayerIdsFromRoom_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockGameService_getPlayerIdsFromRoom_Call) RunAndReturn(run func(roomId string, playerId string) []string) *MockGameService_getPlayerIdsFromRoom_Call {
	_c.Call.Return(run)
	return _c
}

// getPlayerIdsFromRoomAndTeam provides a mock function for the type MockGameService
func (_mock *MockGameService) getPlayerIdsFromRoomAndTeam(roomId string, playerId string) ([]string, bool) {
	ret := _mock.Called(roomId, playerId)

	if len(ret) == 0 {
		panic("no return value specified for getPlayerIdsFromRoomAndTeam")
	}

	var r0 []string
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]string, bool)); ok {
		return returnFunc(roomId, playerId)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = returnFunc(roomId, playerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = returnFunc(roomId, playerId)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockGameService_getPlayerIdsFromRoomAndTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getPlayerIdsFromRoomAndTeam'
type MockGameService_getPlayerIdsFromRoomAndTeam_Call struct {
	*mock.Call
}

// getPlayerIdsFromRoomAndTeam is a helper method to define mock.On call
//   - roomId string
//   - playerId string
func (_e *MockGameService_Expecter) getPlayerIdsFromRoomAndTeam(roomId interface{}, playerId interface{}) *MockGameService_getPlayerIdsFromRoomAndTeam_Call {
	return &MockGameService_getPlayerIdsFromRoomAndTeam_Call{Call: _e.mock.On("getPlayerIdsFromRoomAndTeam", roomId, playerId)}
}

func (_c *MockGameService_getPlayerIdsFromRoomAndTeam_Call) Run(run func(roomId string, playerId string)) *MockGameService_getPlayerIdsFromRoomAndTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGameService_getPlayerIdsFromRoomAndTeam_Call) Return(strings []string, b bool) *MockGameService_getPlayerIdsFromRoomAndTeam_Call {
	_c.Call.Return(strings, b)
	return _c
}

func (_c *MockGameService_getPlayerIdsFromRoomAndTeam_Call) RunAndReturn(run func(roomId string, playerId string) ([]string, bool)) *MockGameService_getPlayerIdsFromRoomAndTeam_Call {
	_c.Call.Return(run)
	return _c
}

// rectCollision provides a mock function for the type MockGameService
func (_mock *MockGameService) rectCollision(point state.Position, center state.Position, width float64, height float64) bool {
	ret := _mock.Called(point, center, width, height)

	if len(ret) == 0 {
		panic("no return value specified for rectCollision")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(state.Position, state.Position, float64, float64) bool); ok {
		r0 = returnFunc(point, center, width, height)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockGameService_rectCollision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'rectCollision'
type MockGameService_rectCollision_Call struct {
	*mock.Call
}

// rectCollision is a helper method to define mock.On call
//   - point state.Position
//   - center state.Position
//   - width float64
//   - height float64
func (_e *MockGameService_Expecter) rectCollision(point interface{}, center interface{}, width interface{}, height interface{}) *MockGameService_rectCollision_Call {
	return &MockGameService_rectCollision_Call{Call: _e.mock.On("rectCollision", point, center, width, height)}
}

func (_c *MockGameService_rectCollision_Call) Run(run func(point state.Position, center state.Position, width float64, height float64)) *MockGameService_rectCollision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 state.Position
		if args[0] != nil {
			arg0 = args[0].(state.Position)
		}
		var arg1 state.Position
		if args[1] != nil {
			arg1 = args[1].(state.Position)
		}
		var arg2 float64
		if args[2] != nil {
			arg2 = args[2].(float64)
		}
		var arg3 float64
		if args[3] != nil {
			arg3 = args[3].(float64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockGameService_rectCollision_Call) Return(b bool) *MockGameService_rectCollision_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockGameService_rectCollision_Call) RunAndReturn(run func(point state.Position, center state.Position, width float64, height float64) bool) *MockGameService_rectCollision_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGameStateRepository creates a new instance of MockGameStateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGameStateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGameStateRepository {
	mock := &MockGameStateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGameStateRepository is an autogenerated mock type for the GameStateRepository type
type MockGameStateRepository struct {
	mock.Mock
}

type MockGameStateRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGameStateRepository) EXPECT() *MockGameStateRepository_Expecter {
	return &MockGameStateRepository_Expecter{mock: &_m.Mock}
}

// PublishToRoom provides a mock function for the type MockGameStateRepository
func (_mock *MockGameStateRepository) PublishToRoom(payload string) {
	_mock.Called(payload)
	return
}

// MockGameStateRepository_PublishToRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishToRoom'
type MockGameStateRepository_PublishToRoom_Call struct {
	*mock.Call
}

// PublishToRoom is a helper method to define mock.On call
//   - payload string
func (_e *MockGameStateRepository_Expecter) PublishToRoom(payload interface{}) *MockGameStateRepository_PublishToRoom_Call {
	return &MockGameStateRepository_PublishToRoom_Call{Call: _e.mock.On("PublishToRoom", payload)}
}

func (_c *MockGameStateRepository_PublishToRoom_Call) Run(run func(payload string)) *MockGameStateRepository_PublishToRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGameStateRepository_PublishToRoom_Call) Return() *MockGameStateRepository_PublishToRoom_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameStateRepository_PublishToRoom_Call) RunAndReturn(run func(payload string)) *MockGameStateRepository_PublishToRoom_Call {
	_c.Run(run)
	return _c
}

// RenewLeadership provides a mock function for the type MockGameStateRepository
func (_mock *MockGameStateRepository) RenewLeadership(roomID string, expiration time.Duration) (bool, error) {
	ret := _mock.Called(roomID, expiration)

	if len(ret) == 0 {
		panic("no return value specified for RenewLeadership")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, time.Duration) (bool, error)); ok {
		return returnFunc(roomID, expiration)
	}
	if returnFunc, ok := ret.Get(0).(func(string, time.Duration) bool); ok {
		r0 = returnFunc(roomID, expiration)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, time.Duration) error); ok {
		r1 = returnFunc(roomID, expiration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGameStateRepository_RenewLeadership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenewLeadership'
type MockGameStateRepository_RenewLeadership_Call struct {
	*mock.Call
}

// RenewLeadership is a helper method to define mock.On call
//   - roomID string
//   - expiration time.Duration
func (_e *MockGameStateRepository_Expecter) RenewLeadership(roomID interface{}, expiration interface{}) *MockGameStateRepository_RenewLeadership_Call {
	return &MockGameStateRepository_RenewLeadership_Call{Call: _e.mock.On("RenewLeadership", roomID, expiration)}
}

func (_c *MockGameStateRepository_RenewLeadership_Call) Run(run func(roomID string, expiration time.Duration)) *MockGameStateRepository_RenewLeadership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGameStateRepository_RenewLeadership_Call) Return(b bool, err error) *MockGameStateRepository_RenewLeadership_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockGameStateRepository_RenewLeadership_Call) RunAndReturn(run func(roomID string, expiration time.Duration) (bool, error)) *MockGameStateRepository_RenewLeadership_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreGameState provides a mock function for the type MockGameStateRepository
func (_mock *MockGameStateRepository) RestoreGameState(roomID string) *state.GameState {
	ret := _mock.Called(roomID)

	if len(ret) == 0 {
		panic("no return value specified for RestoreGameState")
	}

	var r0 *state.GameState
	if returnFunc, ok := ret.Get(0).(func(string) *state.GameState); ok {
		r0 = returnFunc(roomID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.GameState)
		}
	}
	return r0
}

// MockGameStateRepository_RestoreGameState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreGameState'
type MockGameStateRepository_RestoreGameState_Call struct {
	*mock.Call
}

// RestoreGameState is a helper method to define mock.On call
//   - roomID string
func (_e *MockGameStateRepository_Expecter) RestoreGameState(roomID interface{}) *MockGameStateRepository_RestoreGameState_Call {
	return &MockGameStateRepository_RestoreGameState_Call{Call: _e.mock.On("RestoreGameState", roomID)}
}

func (_c *MockGameStateRepository_RestoreGameState_Call) Run(run func(roomID string)) *MockGameStateRepository_RestoreGameState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGameStateRepository_RestoreGameState_Call) Return(gameState *state.GameState) *MockGameStateRepository_RestoreGameState_Call {
	_c.Call.Return(gameState)
	return _c
}

func (_c *MockGameStateRepository_RestoreGameState_Call) RunAndReturn(run func(roomID string) *state.GameState) *MockGameStateRepository_RestoreGameState_Call {
	_c.Call.Return(run)
	return _c
}

// SaveGameState provides a mock function for the type MockGameStateRepository
func (_mock *MockGameStateRepository) SaveGameState(gameState *state.GameState) {
	_mock.Called(gameState)
	return
}

// MockGameStateRepository_SaveGameState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveGameState'
type MockGameStateRepository_SaveGameState_Call struct {
	*mock.Call
}

// SaveGameState is a helper method to define mock.On call
//   - gameState *state.GameState
func (_e *MockGameStateRepository_Expecter) SaveGameState(gameState interface{}) *MockGameStateRepository_SaveGameState_Call {
	return &MockGameStateRepository_SaveGameState_Call{Call: _e.mock.On("SaveGameState", gameState)}
}

func (_c *MockGameStateRepository_SaveGameState_Call) Run(run func(gameState *state.GameState)) *MockGameStateRepository_SaveGameState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *state.GameState
		if args[0] != nil {
			arg0 = args[0].(*state.GameState)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGameStateRepository_SaveGameState_Call) Return() *MockGameStateRepository_SaveGameState_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameStateRepository_SaveGameState_Call) RunAndReturn(run func(gameState *state.GameState)) *MockGameStateRepository_SaveGameState_Call {
	_c.Run(run)
	return _c
}

// SendReceivedMessage provides a mock function for the type MockGameStateRepository
func (_mock *MockGameStateRepository) SendReceivedMessage(messageEncoded string) {
	_mock.Called(messageEncoded)
	return
}

// MockGameStateRepository_SendReceivedMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendReceivedMessage'
type MockGameStateRepository_SendReceivedMessage_Call struct {
	*mock.Call
}

// SendReceivedMessage is a helper method to define mock.On call
//   - messageEncoded string
func (_e *MockGameStateRepository_Expecter) SendReceivedMessage(messageEncoded interface{}) *MockGameStateRepository_SendReceivedMessage_Call {
	return &MockGameStateRepository_SendReceivedMessage_Call{Call: _e.mock.On("SendReceivedMessage", messageEncoded)}
}

func (_c *MockGameStateRepository_SendReceivedMessage_Call) Run(run func(messageEncoded string)) *MockGameStateRepository_SendReceivedMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGameStateRepository_SendReceivedMessage_Call) Return() *MockGameStateRepository_SendReceivedMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameStateRepository_SendReceivedMessage_Call) RunAndReturn(run func(messageEncoded string)) *MockGameStateRepository_SendReceivedMessage_Call {
	_c.Run(run)
	return _c
}

// SetLeaderElector provides a mock function for the type MockGameStateRepository
func (_mock *MockGameStateRepository) SetLeaderElector(elector LeaderElector) {
	_mock.Called(elector)
	return
}

// MockGameStateRepository_SetLeaderElector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLeaderElector'
type MockGameStateRepository_SetLeaderElector_Call struct {
	*mock.Call
}

// SetLeaderElector is a helper method to define mock.On call
//   - elector LeaderElector
func (_e *MockGameStateRepository_Expecter) SetLeaderElector(elector interface{}) *MockGameStateRepository_SetLeaderElector_Call {
	return &MockGameStateRepository_SetLeaderElector_Call{Call: _e.mock.On("SetLeaderElector", elector)}
}

func (_c *MockGameStateRepository_SetLeaderElector_Call) Run(run func(elector LeaderElector)) *MockGameStateRepository_SetLeaderElector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 LeaderElector
		if args[0] != nil {
			arg0 = args[0].(LeaderElector)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGameStateRepository_SetLeaderElector_Call) Return() *MockGameStateRepository_SetLeaderElector_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameStateRepository_SetLeaderElector_Call) RunAndReturn(run func(elector LeaderElector)) *MockGameStateRepository_SetLeaderElector_Call {
	_c.Run(run)
	return _c
}

// SubscribeMessages provides a mock function for the type MockGameStateRepository
func (_mock *MockGameStateRepository) SubscribeMessages() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SubscribeMessages")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGameStateRepository_SubscribeMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeMessages'
type MockGameStateRepository_SubscribeMessages_Call struct {
	*mock.Call
}

// SubscribeMessages is a helper method to define mock.On call
func (_e *MockGameStateRepository_Expecter) SubscribeMessages() *MockGameStateRepository_SubscribeMessages_Call {
	return &MockGameStateRepository_SubscribeMessages_Call{Call: _e.mock.On("SubscribeMessages")}
}

func (_c *MockGameStateRepository_SubscribeMessages_Call) Run(run func()) *MockGameStateRepository_SubscribeMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGameStateRepository_SubscribeMessages_Call) Return(err error) *MockGameStateRepository_SubscribeMessages_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGameStateRepository_SubscribeMessages_Call) RunAndReturn(run func() error) *MockGameStateRepository_SubscribeMessages_Call {
	_c.Call.Return(run)
	return _c
}

// TryToBecomeLeader provides a mock function for the type MockGameStateRepository
func (_mock *MockGameStateRepository) TryToBecomeLeader(roomID string) bool {
	ret := _mock.Called(roomID)

	if len(ret) == 0 {
		panic("no return value specified for TryToBecomeLeader")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(roomID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockGameStateRepository_TryToBecomeLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryToBecomeLeader'
type MockGameStateRepository_TryToBecomeLeader_Call struct {
	*mock.Call
}

// TryToBecomeLeader is a helper method to define mock.On call
//   - roomID string
func (_e *MockGameStateRepository_Expecter) TryToBecomeLeader(roomID interface{}) *MockGameStateRepository_TryToBecomeLeader_Call {
	return &MockGameStateRepository_TryToBecomeLeader_Call{Call: _e.mock.On("TryToBecomeLeader", roomID)}
}

func (_c *MockGameStateRepository_TryToBecomeLeader_Call) Run(run func(roomID string)) *MockGameStateRepository_TryToBecomeLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGameStateRepository_TryToBecomeLeader_Call) Return(b bool) *MockGameStateRepository_TryToBecomeLeader_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockGameStateRepository_TryToBecomeLeader_Call) RunAndReturn(run func(roomID string) bool) *MockGameStateRepository_TryToBecomeLeader_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGameBullets provides a mock function for the type MockGameStateRepository
func (_mock *MockGameStateRepository) UpdateGameBullets(bullet state.Bullet, players []string) {
	_mock.Called(bullet, players)
	return
}

// MockGameStateRepository_UpdateGameBullets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGameBullets'
type MockGameStateRepository_UpdateGameBullets_Call struct {
	*mock.Call
}

// UpdateGameBullets is a helper method to define mock.On call
//   - bullet state.Bullet
//   - players []string
func (_e *MockGameStateRepository_Expecter) UpdateGameBullets(bullet interface{}, players interface{}) *MockGameStateRepository_UpdateGameBullets_Call {
	return &MockGameStateRepository_UpdateGameBullets_Call{Call: _e.mock.On("UpdateGameBullets", bullet, players)}
}

func (_c *MockGameStateRepository_UpdateGameBullets_Call) Run(run func(bullet state.Bullet, players []string)) *MockGameStateRepository_UpdateGameBullets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 state.Bullet
		if args[0] != nil {
			arg0 = args[0].(state.Bullet)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGameStateRepository_UpdateGameBullets_Call) Return() *MockGameStateRepository_UpdateGameBullets_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameStateRepository_UpdateGameBullets_Call) RunAndReturn(run func(bullet state.Bullet, players []string)) *MockGameStateRepository_UpdateGameBullets_Call {
	_c.Run(run)
	return _c
}

// UpdateGamePlayerState provides a mock function for the type MockGameStateRepository
func (_mock *MockGameStateRepository) UpdateGamePlayerState(playerId string, position state.Position, players []string) {
	_mock.Called(playerId, position, players)
	return
}

// MockGameStateRepository_UpdateGamePlayerState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGamePlayerState'
type MockGameStateRepository_UpdateGamePlayerState_Call struct {
	*mock.Call
}

// UpdateGamePlayerState is a helper method to define mock.On call
//   - playerId string
//   - position state.Position
//   - players []string
func (_e *MockGameStateRepository_Expecter) UpdateGamePlayerState(playerId interface{}, position interface{}, players interface{}) *MockGameStateRepository_UpdateGamePlayerState_Call {
	return &MockGameStateRepository_UpdateGamePlayerState_Call{Call: _e.mock.On("UpdateGamePlayerState", playerId, position, players)}
}

func (_c *MockGameStateRepository_UpdateGamePlayerState_Call) Run(run func(playerId string, position state.Position, players []string)) *MockGameStateRepository_UpdateGamePlayerState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 state.Position
		if args[1] != nil {
			arg1 = args[1].(state.Position)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGameStateRepository_UpdateGamePlayerState_Call) Return() *MockGameStateRepository_UpdateGamePlayerState_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGameStateRepository_UpdateGamePlayerState_Call) RunAndReturn(run func(playerId string, position state.Position, players []string)) *MockGameStateRepository_UpdateGamePlayerState_Call {
	_c.Run(run)
	return _c
}

// NewMockRoomRepository creates a new instance of MockRoomRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRoomRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRoomRepository {
	mock := &MockRoomRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRoomRepository is an autogenerated mock type for the RoomRepository type
type MockRoomRepository struct {
	mock.Mock
}

type MockRoomRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRoomRepository) EXPECT() *MockRoomRepository_Expecter {
	return &MockRoomRepository_Expecter{mock: &_m.Mock}
}

// AddPlayer provides a mock function for the type MockRoomRepository
func (_mock *MockRoomRepository) AddPlayer(playerRequest *PlayerRequest) (*Room, error) {
	ret := _mock.Called(playerRequest)

	if len(ret) == 0 {
		panic("no return value specified for AddPlayer")
	}

	var r0 *Room
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*PlayerRequest) (*Room, error)); ok {
		return returnFunc(playerRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(*PlayerRequest) *Room); ok {
		r0 = returnFunc(playerRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Room)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*PlayerRequest) error); ok {
		r1 = returnFunc(playerRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoomRepository_AddPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPlayer'
type MockRoomRepository_AddPlayer_Call struct {
	*mock.Call
}

// AddPlayer is a helper method to define mock.On call
//   - playerRequest *PlayerRequest
func (_e *MockRoomRepository_Expecter) AddPlayer(playerRequest interface{}) *MockRoomRepository_AddPlayer_Call {
	return &MockRoomRepository_AddPlayer_Call{Call: _e.mock.On("AddPlayer", playerRequest)}
}

func (_c *MockRoomRepository_AddPlayer_Call) Run(run func(playerRequest *PlayerRequest)) *MockRoomRepository_AddPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *PlayerRequest
		if args[0] != nil {
			arg0 = args[0].(*PlayerRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRoomRepository_AddPlayer_Call) Return(room *Room, err error) *MockRoomRepository_AddPlayer_Call {
	_c.Call.Return(room, err)
	return _c
}

func (_c *MockRoomRepository_AddPlayer_Call) RunAndReturn(run func(playerRequest *PlayerRequest) (*Room, error)) *MockRoomRepository_AddPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeRoomOwner provides a mock function for the type MockRoomRepository
func (_mock *MockRoomRepository) ChangeRoomOwner(roomId string, player Player) (*Room, error) {
	ret := _mock.Called(roomId, player)

	if len(ret) == 0 {
		panic("no return value specified for ChangeRoomOwner")
	}

	var r0 *Room
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, Player) (*Room, error)); ok {
		return returnFunc(roomId, player)
	}
	if returnFunc, ok := ret.Get(0).(func(string, Player) *Room); ok {
		r0 = returnFunc(roomId, player)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Room)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, Player) error); ok {
		r1 = returnFunc(roomId, player)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoomRepository_ChangeRoomOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeRoomOwner'
type MockRoomRepository_ChangeRoomOwner_Call struct {
	*mock.Call
}

// ChangeRoomOwner is a helper method to define mock.On call
//   - roomId string
//   - player Player
func (_e *MockRoomRepository_Expecter) ChangeRoomOwner(roomId interface{}, player interface{}) *MockRoomRepository_ChangeRoomOwner_Call {
	return &MockRoomRepository_ChangeRoomOwner_Call{Call: _e.mock.On("ChangeRoomOwner", roomId, player)}
}

func (_c *MockRoomRepository_ChangeRoomOwner_Call) Run(run func(roomId string, player Player)) *MockRoomRepository_ChangeRoomOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 Player
		if args[1] != nil {
			arg1 = args[1].(Player)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoomRepository_ChangeRoomOwner_Call) Return(room *Room, err error) *MockRoomRepository_ChangeRoomOwner_Call {
	_c.Call.Return(room, err)
	return _c
}

func (_c *MockRoomRepository_ChangeRoomOwner_Call) RunAndReturn(run func(roomId string, player Player) (*Room, error)) *MockRoomRepository_ChangeRoomOwner_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePlayer provides a mock function for the type MockRoomRepository
func (_mock *MockRoomRepository) CreatePlayer(id int) (*Player, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlayer")
	}

	var r0 *Player
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (*Player, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) *Player); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Player)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoomRepository_CreatePlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePlayer'
type MockRoomRepository_CreatePlayer_Call struct {
	*mock.Call
}

// CreatePlayer is a helper method to define mock.On call
//   - id int
func (_e *MockRoomRepository_Expecter) CreatePlayer(id interface{}) *MockRoomRepository_CreatePlayer_Call {
	return &MockRoomRepository_CreatePlayer_Call{Call: _e.mock.On("CreatePlayer", id)}
}

func (_c *MockRoomRepository_CreatePlayer_Call) Run(run func(id int)) *MockRoomRepository_CreatePlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRoomRepository_CreatePlayer_Call) Return(player *Player, err error) *MockRoomRepository_CreatePlayer_Call {
	_c.Call.Return(player, err)
	return _c
}

func (_c *MockRoomRepository_CreatePlayer_Call) RunAndReturn(run func(id int) (*Player, error)) *MockRoomRepository_CreatePlayer_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePlayerRoom provides a mock function for the type MockRoomRepository
func (_mock *MockRoomRepository) DeletePlayerRoom(playerId string) error {
	ret := _mock.Called(playerId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePlayerRoom")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(playerId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRoomRepository_DeletePlayerRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePlayerRoom'
type MockRoomRepository_DeletePlayerRoom_Call struct {
	*mock.Call
}

// DeletePlayerRoom is a helper method to define mock.On call
//   - playerId string
func (_e *MockRoomRepository_Expecter) DeletePlayerRoom(playerId interface{}) *MockRoomRepository_DeletePlayerRoom_Call {
	return &MockRoomRepository_DeletePlayerRoom_Call{Call: _e.mock.On("DeletePlayerRoom", playerId)}
}

func (_c *MockRoomRepository_DeletePlayerRoom_Call) Run(run func(playerId string)) *MockRoomRepository_DeletePlayerRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRoomRepository_DeletePlayerRoom_Call) Return(err error) *MockRoomRepository_DeletePlayerRoom_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRoomRepository_DeletePlayerRoom_Call) RunAndReturn(run func(playerId string) error) *MockRoomRepository_DeletePlayerRoom_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoom provides a mock function for the type MockRoomRepository
func (_mock *MockRoomRepository) DeleteRoom(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoom")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRoomRepository_DeleteRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoom'
type MockRoomRepository_DeleteRoom_Call struct {
	*mock.Call
}

// DeleteRoom is a helper method to define mock.On call
//   - id string
func (_e *MockRoomRepository_Expecter) DeleteRoom(id interface{}) *MockRoomRepository_DeleteRoom_Call {
	return &MockRoomRepository_DeleteRoom_Call{Call: _e.mock.On("DeleteRoom", id)}
}

func (_c *MockRoomRepository_DeleteRoom_Call) Run(run func(id string)) *MockRoomRepository_DeleteRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRoomRepository_DeleteRoom_Call) Return(err error) *MockRoomRepository_DeleteRoom_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRoomRepository_DeleteRoom_Call) RunAndReturn(run func(id string) error) *MockRoomRepository_DeleteRoom_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlayerRoom provides a mock function for the type MockRoomRepository
func (_mock *MockRoomRepository) GetPlayerRoom(playerId string) (interface{}, error) {
	ret := _mock.Called(playerId)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayerRoom")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return returnFunc(playerId)
	}
	if returnFunc, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = returnFunc(playerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(playerId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoomRepository_GetPlayerRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayerRoom'
type MockRoomRepository_GetPlayerRoom_Call struct {
	*mock.Call
}

// GetPlayerRoom is a helper method to define mock.On call
//   - playerId string
func (_e *MockRoomRepository_Expecter) GetPlayerRoom(playerId interface{}) *MockRoomRepository_GetPlayerRoom_Call {
	return &MockRoomRepository_GetPlayerRoom_Call{Call: _e.mock.On("GetPlayerRoom", playerId)}
}

func (_c *MockRoomRepository_GetPlayerRoom_Call) Run(run func(playerId string)) *MockRoomRepository_GetPlayerRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRoomRepository_GetPlayerRoom_Call) Return(ifaceVal interface{}, err error) *MockRoomRepository_GetPlayerRoom_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockRoomRepository_GetPlayerRoom_Call) RunAndReturn(run func(playerId string) (interface{}, error)) *MockRoomRepository_GetPlayerRoom_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoom provides a mock function for the type MockRoomRepository
func (_mock *MockRoomRepository) GetRoom(key string) (*Room, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetRoom")
	}

	var r0 *Room
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*Room, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *Room); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Room)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoomRepository_GetRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoom'
type MockRoomRepository_GetRoom_Call struct {
	*mock.Call
}

// GetRoom is a helper method to define mock.On call
//   - key string
func (_e *MockRoomRepository_Expecter) GetRoom(key interface{}) *MockRoomRepository_GetRoom_Call {
	return &MockRoomRepository_GetRoom_Call{Call: _e.mock.On("GetRoom", key)}
}

func (_c *MockRoomRepository_GetRoom_Call) Run(run func(key string)) *MockRoomRepository_GetRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRoomRepository_GetRoom_Call) Return(room *Room, err error) *MockRoomRepository_GetRoom_Call {
	_c.Call.Return(room, err)
	return _c
}

func (_c *MockRoomRepository_GetRoom_Call) RunAndReturn(run func(key string) (*Room, error)) *MockRoomRepository_GetRoom_Call {
	_c.Call.Return(run)
	return _c
}

// GetRooms provides a mock function for the type MockRoomRepository
func (_mock *MockRoomRepository) GetRooms(page int, pageSize int) (*[]Room, error) {
	ret := _mock.Called(page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetRooms")
	}

	var r0 *[]Room
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int) (*[]Room, error)); ok {
		return returnFunc(page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) *[]Room); ok {
		r0 = returnFunc(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]Room)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = returnFunc(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoomRepository_GetRooms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRooms'
type MockRoomRepository_GetRooms_Call struct {
	*mock.Call
}

// GetRooms is a helper method to define mock.On call
//   - page int
//   - pageSize int
func (_e *MockRoomRepository_Expecter) GetRooms(page interface{}, pageSize interface{}) *MockRoomRepository_GetRooms_Call {
	return &MockRoomRepository_GetRooms_Call{Call: _e.mock.On("GetRooms", page, pageSize)}
}

func (_c *MockRoomRepository_GetRooms_Call) Run(run func(page int, pageSize int)) *MockRoomRepository_GetRooms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRoomRepository_GetRooms_Call) Return(rooms *[]Room, err error) *MockRoomRepository_GetRooms_Call {
	_c.Call.Return(rooms, err)
	return _c
}

func (_c *MockRoomRepository_GetRooms_Call) RunAndReturn(run func(page int, pageSize int) (*[]Room, error)) *MockRoomRepository_GetRooms_Call {
	_c.Call.Return(run)
	return _c
}

// PublishToRoom provides a mock function for the type MockRoomRepository
func (_mock *MockRoomRepository) PublishToRoom(payload string) {
	_mock.Called(payload)
	return
}

// MockRoomRepository_PublishToRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishToRoom'
type MockRoomRepository_PublishToRoom_Call struct {
	*mock.Call
}

// PublishToRoom is a helper method to define mock.On call
//   - payload string
func (_e *MockRoomRepository_Expecter) PublishToRoom(payload interface{}) *MockRoomRepository_PublishToRoom_Call {
	return &MockRoomRepository_PublishToRoom_Call{Call: _e.mock.On("PublishToRoom", payload)}
}

func (_c *MockRoomRepository_PublishToRoom_Call) Run(run func(payload string)) *MockRoomRepository_PublishToRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRoomRepository_PublishToRoom_Call) Return() *MockRoomRepository_PublishToRoom_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRoomRepository_PublishToRoom_Call) RunAndReturn(run func(payload string)) *MockRoomRepository_PublishToRoom_Call {
	_c.Run(run)
	return _c
}

// RemovePlayer provides a mock function for the type MockRoomRepository
func (_mock *MockRoomRepository) RemovePlayer(playerRequest *PlayerRequest) (*Room, error) {
	ret := _mock.Called(playerRequest)

	if len(ret) == 0 {
		panic("no return value specified for RemovePlayer")
	}

	var r0 *Room
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*PlayerRequest) (*Room, error)); ok {
		return returnFunc(playerRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(*PlayerRequest) *Room); ok {
		r0 = returnFunc(playerRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Room)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*PlayerRequest) error); ok {
		r1 = returnFunc(playerRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoomRepository_RemovePlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePlayer'
type MockRoomRepository_RemovePlayer_Call struct {
	*mock.Call
}

// RemovePlayer is a helper method to define mock.On call
//   - playerRequest *PlayerRequest
func (_e *MockRoomRepository_Expecter) RemovePlayer(playerRequest interface{}) *MockRoomRepository_RemovePlayer_Call {
	return &MockRoomRepository_RemovePlayer_Call{Call: _e.mock.On("RemovePlayer", playerRequest)}
}

func (_c *MockRoomRepository_RemovePlayer_Call) Run(run func(playerRequest *PlayerRequest)) *MockRoomRepository_RemovePlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *PlayerRequest
		if args[0] != nil {
			arg0 = args[0].(*PlayerRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRoomRepository_RemovePlayer_Call) Return(room *Room, err error) *MockRoomRepository_RemovePlayer_Call {
	_c.Call.Return(room, err)
	return _c
}

func (_c *MockRoomRepository_RemovePlayer_Call) RunAndReturn(run func(playerRequest *PlayerRequest) (*Room, error)) *MockRoomRepository_RemovePlayer_Call {
	_c.Call.Return(run)
	return _c
}

// SavePlayerRoom provides a mock function for the type MockRoomRepository
func (_mock *MockRoomRepository) SavePlayerRoom(playerRequest *PlayerRequest) error {
	ret := _mock.Called(playerRequest)

	if len(ret) == 0 {
		panic("no return value specified for SavePlayerRoom")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*PlayerRequest) error); ok {
		r0 = returnFunc(playerRequest)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRoomRepository_SavePlayerRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePlayerRoom'
type MockRoomRepository_SavePlayerRoom_Call struct {
	*mock.Call
}

// SavePlayerRoom is a helper method to define mock.On call
//   - playerRequest *PlayerRequest
func (_e *MockRoomRepository_Expecter) SavePlayerRoom(playerRequest interface{}) *MockRoomRepository_SavePlayerRoom_Call {
	return &MockRoomRepository_SavePlayerRoom_Call{Call: _e.mock.On("SavePlayerRoom", playerRequest)}
}

func (_c *MockRoomRepository_SavePlayerRoom_Call) Run(run func(playerRequest *PlayerRequest)) *MockRoomRepository_SavePlayerRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *PlayerRequest
		if args[0] != nil {
			arg0 = args[0].(*PlayerRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRoomRepository_SavePlayerRoom_Call) Return(err error) *MockRoomRepository_SavePlayerRoom_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRoomRepository_SavePlayerRoom_Call) RunAndReturn(run func(playerRequest *PlayerRequest) error) *MockRoomRepository_SavePlayerRoom_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRoom provides a mock function for the type MockRoomRepository
func (_mock *MockRoomRepository) SaveRoom(room *Room) error {
	ret := _mock.Called(room)

	if len(ret) == 0 {
		panic("no return value specified for SaveRoom")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Room) error); ok {
		r0 = returnFunc(room)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRoomRepository_SaveRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRoom'
type MockRoomRepository_SaveRoom_Call struct {
	*mock.Call
}

// SaveRoom is a helper method to define mock.On call
//   - room *Room
func (_e *MockRoomRepository_Expecter) SaveRoom(room interface{}) *MockRoomRepository_SaveRoom_Call {
	return &MockRoomRepository_SaveRoom_Call{Call: _e.mock.On("SaveRoom", room)}
}

func (_c *MockRoomRepository_SaveRoom_Call) Run(run func(room *Room)) *MockRoomRepository_SaveRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Room
		if args[0] != nil {
			arg0 = args[0].(*Room)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRoomRepository_SaveRoom_Call) Return(err error) *MockRoomRepository_SaveRoom_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRoomRepository_SaveRoom_Call) RunAndReturn(run func(room *Room) error) *MockRoomRepository_SaveRoom_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRoomRequest provides a mock function for the type MockRoomRepository
func (_mock *MockRoomRepository) SaveRoomRequest(roomRequest *RoomRequest) (*Room, error) {
	ret := _mock.Called(roomRequest)

	if len(ret) == 0 {
		panic("no return value specified for SaveRoomRequest")
	}

	var r0 *Room
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*RoomRequest) (*Room, error)); ok {
		return returnFunc(roomRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(*RoomRequest) *Room); ok {
		r0 = returnFunc(roomRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Room)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*RoomRequest) error); ok {
		r1 = returnFunc(roomRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoomRepository_SaveRoomRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRoomRequest'
type MockRoomRepository_SaveRoomRequest_Call struct {
	*mock.Call
}

// SaveRoomRequest is a helper method to define mock.On call
//   - roomRequest *RoomRequest
func (_e *MockRoomRepository_Expecter) SaveRoomRequest(roomRequest interface{}) *MockRoomRepository_SaveRoomRequest_Call {
	return &MockRoomRepository_SaveRoomRequest_Call{Call: _e.mock.On("SaveRoomRequest", roomRequest)}
}

func (_c *MockRoomRepository_SaveRoomRequest_Call) Run(run func(roomRequest *RoomRequest)) *MockRoomRepository_SaveRoomRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *RoomRequest
		if args[0] != nil {
			arg0 = args[0].(*RoomRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRoomRepository_SaveRoomRequest_Call) Return(room *Room, err error) *MockRoomRepository_SaveRoomRequest_Call {
	_c.Call.Return(room, err)
	return _c
}

func (_c *MockRoomRepository_SaveRoomRequest_Call) RunAndReturn(run func(roomRequest *RoomRequest) (*Room, error)) *MockRoomRepository_SaveRoomRequest_Call {
	_c.Call.Return(run)
	return _c
}
